#!/bin/bash
# https://github.com/catapullt/backup-tools
# 
# Default configuration
JIRA_HOME_DIR=${JIRA_HOME_DIR:-/var/atlassian/application-data/jira}
JIRA_VERSION_NAME=${JIRA_VERSION_NAME:-"0.0.0"}
JIRA_SCHEMA_NAME=${JIRA_SCHEMA_NAME:-jira}
BACKUP_HOME_DIR=${BACKUP_HOME_DIR:-/tmp/jira-backup}
MYSQLDUMP_PARAMS=${MYSQLDUMP_PARAMS:-"--single-transaction --skip-quote-names --hex-blob"}

# Source config file if available
[ -r /etc/jira-backup.conf ] && source /etc/jira-backup.conf

BACKUP_NAME=jira-`date +%Y%m%d-%H%M%S`
WORK_DIR=$BACKUP_HOME_DIR/$BACKUP_NAME
ARCHIVE_NAME=$BACKUP_NAME.tar.gz

function log_stdout
{
    TIME=`date +%H:%M:%S`
    echo "($TIME) $@"
}

function log_stderr
{
    TIME=`date +%H:%M:%S`
    echo "($TIME) $@" >&2
}

function notify
{
    log_stdout "$@"
}

function notify_error
{
    log_stderr "Error: $@"
}

function fail
{
    notify_error "$@"
    
    log_stderr "Exiting now."
    exit 1
}

function fail_and_cleanup
{
    notify_error "$@"

    if [ -d $WORK_DIR ]
    then
        log_stderr "Removing work directory"
        rm -rf $WORK_DIR
    fi

    if [ -f $BACKUP_HOME_DIR/$ARCHIVE_NAME ]
    then
        log_stderr "Removing backup archive"
        rm -f $BACKUP_HOME_DIR/$ARCHIVE_NAME
    fi

    log_stderr "Exiting now."
    exit 1
}

function check_config
{
    [ -z "$JIRA_HOME_DIR" ] && { notify_error "JIRA_HOME_DIR empty"; return 1; }
    [ -z "$JIRA_SCHEMA_NAME" ] && { notify_error "JIRA_SCHEMA_NAME empty"; return 1; }
    [ -z "$BACKUP_HOME_DIR" ] && { notify_error "BACKUP_HOME_DIR empty"; return 1; }

    [ ! -d "$JIRA_HOME_DIR" ] && { notify_error "JIRA_HOME_DIR $JIRA_HOME_DIR is not a directory"; return 1; }
    [ ! -d "$BACKUP_HOME_DIR" ] && { notify_error "BACKUP_HOME_DIR $BACKUP_HOME_DIR is not a directory"; return 1; }

    return 0
}

function create_work_directory
{
    notify "Creating backup '$BACKUP_NAME' in '$BACKUP_HOME_DIR'"
    mkdir -p $WORK_DIR || return $?
}

function dump_database
{
    notify "Creating database dump"
    mysqldump $MYSQLDUMP_PARAMS $JIRA_SCHEMA_NAME > $WORK_DIR/database.sql || return $?
    
    local size=`stat -c%s $WORK_DIR/database.sql`
    notify "Dumped '$JIRA_SCHEMA_NAME' database schema, size: $size bytes"
}

function copy_application_data
{
    notify "Copying jira data directory"
    cp -r $JIRA_HOME_DIR/data $WORK_DIR/data || return $?
    
    local size=`du -bs $WORK_DIR/data | cut -f 1`
    notify "Copied '$JIRA_HOME_DIR/data' directory, size: $size bytes"
}

function bind_application_version
{
    echo $JIRA_VERSION_NAME > $WORK_DIR/version
    notify "Bound backup archive to application version '$JIRA_VERSION_NAME'"
}

function create_archive
{
    notify "Creating tar archive of database dump and data directory"
    cd $BACKUP_HOME_DIR && tar czf $ARCHIVE_NAME $BACKUP_NAME/ || return $?
    
    local size=`stat -c%s $BACKUP_HOME_DIR/$ARCHIVE_NAME`
    notify "Created backup archive '$BACKUP_HOME_DIR/$ARCHIVE_NAME', size: $size bytes"
}

function calculate_checksum
{
    sha1sum $BACKUP_HOME_DIR/$ARCHIVE_NAME > $BACKUP_HOME_DIR/$ARCHIVE_NAME.sha1

    local checksum=`cut -d ' ' -f 1 $BACKUP_HOME_DIR/$ARCHIVE_NAME.sha1`
    notify "Checksum of backup archive '$BACKUP_HOME_DIR/$ARCHIVE_NAME': $checksum"
}

function remove_work_directory
{
    notify "Removing work directory"
    rm -rf $WORK_DIR

}

check_config || fail "Invalid config values"

create_work_directory || fail_and_cleanup "Could not create work directory"

dump_database || fail_and_cleanup "Could not create schema dump"

copy_application_data || fail_and_cleanup "Could not copy application data"

bind_application_version || fail_and_cleanup "Could not bind application version (wtf?)"

create_archive || fail_and_cleanup "Could not create archive"

calculate_checksum || fail "Backup created but could not calculate checksum"

remove_work_directory || fail "Backup created but could not remove work directory"
